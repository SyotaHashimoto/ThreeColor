論文の改訂のメモ

変更点
- 公理C_uniq,C_mix,C_exists は条件に変更
- Cpos は variable からパラメータに変更
- C_paint はなくなった
- 必要条件・十分条件・最後の主張の変更
  WellColoredTriangle n := Cmix -> Cuniq -> Triangle
  (n 段にどのように規則通り色を塗っても調和する)
  n = 3^k <-> WellColoredTriangle n

3.1 三角形三色問題の形式化

Cpos(x,y,c) を使う．キモチは三角形の彩色．
そのための条件を書く必要がある．

「3.2 公理」 -> 「彩色条件」とかにする．
場所は Def3.8 より前にする

Def 3.8 の目的 (WellColoredTriangleの定義)
WellColoredTriangle n := Cmix -> Cuniq -> ThreeColor
ただし，ThreeColor := Cpos(x,y,c0) /\ Cpos(x,y,c0) -> mix
(n 段にどのように規則通り色を塗っても調和する)


3.2 証明のための準備
C_mix | C_uniq, C_exists は
- 各座標に1つだけ色を塗ることを定めている(C_uniq, C_exists)
- 最上段だけ色塗りが決まればその下も全て決まる(C_mix)
colorYBBY
colorBYB
CposF
  Definition CposF f x y c : Prop := (c = F f x y).
  ただし
  Fixpoint F (f : nat -> Color) (x y : nat) : Color :=
    match y with
    | 0 => f x
    | y'.+1 => mix (F f x y') (F f(x.+1) y')
    end.
「再帰的に定義する」 f x := if x = 0 then 1 else f(x-1)
 ただし，「F は以下で定義される再帰的関数である」など．

C_paint: 最上段の色塗り関数 f を与えれば f と整合的で性質をみたす Cpos が存在する．証明つき (CposF をここで使う)
性質
(予告：
実は Cpos を述語じゃなくて最初から関数として定義して
形式化することもできる．その場合は C_uniq, C_exists は不要．
C_mix 相当だけあればよい．この話は第X章でやる)

3.3 補題 (多少の変更はあるかもしれないが，基本そのまま)

4章
定理4.1
任意の n について, (∃k.n = 3^k) -> WellColoredTriangle n.

これは以下からいえる．

命題4.1
任意のk,n について (n = 3^k -> Cmix -> Cuniq -> ThreeColor ).
Proof
...

-------------------------------------

5章 (木村)
Cpos 関数版 cpos を使う
4章の結果を引用して変更する
やること
定義 WellColoredTriangleF n を定義する
(Cpos の変わりに cpos を使った定義)

補題 WellColoredTriangle n <-> WellColoredTriangleF n
証明：choice を使う+CposFを使う

定理: WellColoredTriangleF n <-> n = 3^k.
証明：
WellColoredTriangleF n <-> WellColoredTriangle n <-> n = 3^k.
